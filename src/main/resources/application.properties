spring.profiles.include=db



## Mybatis
mybatis.config-location=classpath:database/mybatisConfig.xml

######################################################하이버네이트 시작
spring.jpa.hibernate.ddl-auto=none
## create 		: 기존 테이블을 삭제 후 다시 생성(프로젝트 시작시 마다)
## create-drop 	: create 와 같으나 어플리케이션 종료시점에 테이블을 drop
## update 		: 변경된 부분만 수정 적용
## validate		: 엔티티(Entity, VO) 와 테이블이 정상적으로 매핑되었는지 확인
## none			: 사용하지 않을때 
## 개발시에는 편의를 위해 create, create-drop 사용
## 실제 운영시에는 update, validate, none 사용

###### VO 클래스의 멤버변수명이 자동으로 DB에 컬럼명과 연뎔
## regDate 의 형태면 설정이 필요 (camel case)
## reg_date 의 형태면 설정 필요 X (snake case)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

##### JPA에 의해서 자동으로 생성되고 실행되는 SQL문을 실시간으로 출력
logging.level.org.hibernate.SQLQuery=debug

##### ? 에 매핑되는 파라미터 값을출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

##### 하이버네이트가 실행한 SQL 출력
spring.jpa.show-sql=true

##### 하이버네이트가 실행한 SQL을 출력할 때 보기 쉽게 출력
spring.jpa.properties.hibernate.format_sql=true

##### transaction 처리
spring.aop.proxy-target-class=true
######################################################하이버네이트 끝

#################JSP
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

## message 파일의 위치
spring.messages.basename=message/message
## encoding 설정
spring.messages.encoding=UTF-8
## 메시지 코드(키)가 없는 경우
# 예외를 발생시키지 않고 코드자체를 출력
spring.messages.use-code-as-default-message=true
# false는 예외 발생


## FileUpload
## multipart 사용여부
spring.servlet.multipart.enabled=true
## 파일당 최대 파일 크기
spring.servlet.multipart.max-file-size=10MB
## 총 파일 크기 
spring.servlet.multipart.max-request-size=100MB

#
product.filePath=upload/product
review.filePath=upload/review






qna.filePath=upload/qna
#
