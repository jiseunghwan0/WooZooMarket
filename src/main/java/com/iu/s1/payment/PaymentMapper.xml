<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.iu.s1.payment.PaymentMapper">
 	<!-- point 입 출금 업데이트 -->
 	<update id="pointUpdate" parameterType="com.iu.s1.member.MemberVO">
 		update member set mem_point=#{mem_point} where mem_id=#{mem_id}
 	</update>
 	
 	<!-- 포인트 검색 -->
 	<select id="pointSelect" parameterType="java.lang.String" resultType="java.lang.Long">
 		select mem_point from member where mem_id=#{mem_id}
 	</select>
 	
 	<!-- 상품의 이름 검색 -->
 	<select id="productSelect" parameterType="java.lang.Long" resultType="com.iu.s1.product.ProductVO">
 		select * from store_product where sell_num=#{sell_num} 
 	</select>
 	
 	<!-- 입금 입력-->
 	<insert id="paymentCharge" parameterType="com.iu.s1.payment.PayVO">
 		insert into payment values(0,#{pay_price},1,0,#{mem_id},#{point_rest},#{pay_cash},#{buy_history_num},now())
 	</insert>
 	
 	<!-- 상품판매 입력-->
 	<insert id="paymentSell" parameterType="com.iu.s1.payment.PayVO">
 		insert into payment values(0,#{pay_price},2,0,#{mem_id},#{point_rest},#{pay_cash},#{buy_history_num},now())
 	</insert>
 	
 	<!-- 구매/판매 취소시 구매자에게 원래 금액 입력-->
 	<insert id="paymentBuyCancle" parameterType="com.iu.s1.payment.PayVO">
 		insert into payment values(0,#{pay_price},3,0,#{mem_id},#{point_rest},#{pay_cash},#{buy_history_num},now())
 	</insert>
 	
 	<!-- 출금 입력 -->
 	<insert id="paymentOut" parameterType="com.iu.s1.payment.PayVO">
 		insert into payment values(0,#{pay_price},0,1,#{mem_id},#{point_rest},#{pay_cash},#{buy_history_num},now())
 	</insert>
 	
 	<!-- 정산 입력-->
 	<insert id="paymentCalculate" parameterType="com.iu.s1.payment.PayVO">
 		insert into payment values(0,#{pay_price},0,2,#{mem_id},#{point_rest},#{pay_cash},#{buy_history_num},now())
 	</insert>
 	
 	<!-- 입출금 거래 내역 검색 -->
 	<select id="pointManage" parameterType="java.lang.String" resultType="com.iu.s1.payment.PayVO">
 		select * from payment where mem_id=#{id}
 	</select>
 	
 	<!--거래중 테이블 -->
 	<insert id="tradingInsert" parameterType="com.iu.s1.trading.TradingVO" keyProperty="trading_num" useGeneratedKeys="true">
 		insert into trading values(#{sell_num},#{sell_price},#{buyer_id},#{seller_id},0,#{trading_num},0,0,0)
 	</insert>
 	
 	<!-- 판매자 아이디 조회 -->
 	<select id="seller_id_select" parameterType="java.lang.Long" resultType="java.lang.String">
 		select mem_id from member where mem_storeNum
 		=(select mem_storeNum from store_product where sell_num=#{sell_num})
 	</select>
 	
 	<!-- 구매내역 추가 -->
 	<insert id="buy_his" parameterType="com.iu.s1.paymentHistory.Buy_HistoryVO">
 		insert into buy_history values(#{mem_id},#{sell_num},#{sell_price},0,#{buy_history_num},#{sell_product},#{file_name},#{seller_id},#{buy_date},0)
 	</insert>
 	
 	<!-- 판매내역 추가 -->
 	<insert id="sell_his" parameterType="com.iu.s1.paymentHistory.Sell_HistoryVO">
 		insert into sell_history values(#{mem_id},#{sell_num},#{sell_price},0,#{sell_history_num},#{sell_product},#{file_name},#{buyer_id},#{sell_date},0)
 	</insert>
 	
 	<!-- 구매 내역 출력 -->
 	<select id="buy_hisSelect" parameterType="java.lang.String" resultType="com.iu.s1.paymentHistory.Buy_HistoryVO">
 		select * from buy_history where mem_id=#{mem_id}
 	</select>
 	
 	<!-- 판매 내역 출력 -->
  	<select id="sell_hisSelect" parameterType="java.lang.String" resultType="com.iu.s1.paymentHistory.Sell_HistoryVO">
 		select * from sell_history where mem_id=#{mem_id}
 	</select>
 	
 	<!-- 판매자 포인트 업데이트 -->
 	<update id="sellerPointUpdate">
 	
 	</update>
 	
 	<!-- 인수 업데이트 -->
 	<update id="tradingReceiveUp" parameterType="com.iu.s1.trading.TradingVO">
 		update trading set receive=#{receive} where trading_num=#{trading_num}
 	</update>
 	
 	<!-- 인수 업데이트2 -->
 	<update id="buy_statusUp" parameterType="com.iu.s1.paymentHistory.Buy_HistoryVO">
 		update buy_history set status=#{status}, buy_check=#{buy_check} where buy_history_num=#{buy_history_num} and buy_check=0
 	</update>
 	
 	<!-- 인계 업데이트 -->
 	<update id="tradingGiveUp" parameterType="com.iu.s1.trading.TradingVO">
 		update trading set give=#{give} where trading_num=#{trading_num}
 	</update>
 	
 	<!-- 인수 업데이트2 -->
 	<update id="sell_statusUp" parameterType="com.iu.s1.paymentHistory.Sell_HistoryVO">
 		update sell_history set status=#{status}, sell_check=#{sell_check} where sell_history_num=#{sell_history_num} and sell_check=0
 	</update>
 	
 	<!-- trading Select with trading_num -->
 	<select id="tradingSelect" parameterType="java.lang.Long" resultType="com.iu.s1.trading.TradingVO">
 		select * from trading where trading_num=#{trading_num}
 	</select>
 	
 	 <!-- trading Select with sell_num -->
 	<select id="tradingSellNumSelect" parameterType="java.lang.Long" resultType="com.iu.s1.trading.TradingVO">
 		select * from trading where sell_num=#{sell_num}
 	</select>
 	
 	<!--  trading Delete -->
 	<delete id="tradingDelete" parameterType="java.lang.Long">
 		delete from trading where trading_num=#{trading_num} 
 	</delete>
 	
 	<!-- trading List -->
	<sql id="search">
		like concat('%',#{search},'%')
	</sql>
	<select id="tradingList"
		resultType="com.iu.s1.trading.TradingVO" parameterType="Pager">
		select * from trading where
		<choose>
			<when test="kind == 'pn'">
				sell_num
			</when>
			<when test="kind== 'tn'">
				trading_num
			</when>
			<when test="kind== 'bn'">
				buyer_id
			</when>
			<otherwise>
				seller_id
			</otherwise>
		</choose>
		<include refid="search"></include>
		order by trading_num desc
	</select>
 	
 	<!-- 판매자가 로그인 했을 때 판매가 들어온 상품이 있는지 없는지 확인 -->
 	<select id="seller_check" parameterType="java.lang.String" resultType="com.iu.s1.paymentHistory.Sell_HistoryVO">
 		select * from sell_history where mem_id=#{seller_id} and status=0
 	</select>
 	
 	<!-- buy_history 삭제 -->
 	<delete id="del_buyHistory" parameterType="java.lang.Long">
 		delete from buy_history where buy_history_num=#{buy_history_num}
 	</delete>
 	
 	<!-- sell_history 삭제 -->
 	<delete id="del_sellHistory" parameterType="java.lang.Long">
 		delete from sell_history where sell_history_num=#{sell_history_num}
 	</delete>
 	
 	<!-- 거래를 시작 할때 예약중으로 바꾸기 -->
 	<update id="product_sell_statusUp" parameterType="com.iu.s1.product.ProductVO">
 		update store_product set sell_status=#{sell_status} where sell_num=#{sell_num};
 	</update>
 	
 	<!-- paycheckId 생성 -->
 	<insert id="paycheckInsert" parameterType="com.iu.s1.paycheck.PayCheckVO">
 		insert into paycheck values(#{mem_id},#{pay_checkId})
 	</insert>
  	<!-- paycheckId 조회 -->
  	<select id="paycheckSelect" parameterType="java.lang.String" resultType="java.lang.String">
  		select pay_checkId from paycheck where mem_id=#{mem_id}
  	</select>
  	<!-- paycheckId 삭제 -->
  	<delete id="paycheckDel" parameterType="java.lang.String">
  		delete from paycheck where mem_id=#{mem_id}
  	</delete>
  	
  	<!-- member정보 아이디로 가져오기-->
  	<select id="memberVOSel" parameterType="java.lang.String" resultType="com.iu.s1.member.MemberVO">
  		select * from member where mem_id=#{mem_id}
  	</select>
  	
  	<!-- paystats insert -->
  	<insert id="paystatsInsert" parameterType="com.iu.s1.payment.PayStatsVO">
  		insert into paystats values(0,now(),#{seller_address},#{sell_commition})
  	</insert>
  	
  	<!-- sellnum으로 buy_history에서 status 가져오기 -->
  	<select id="buy_status" parameterType="java.lang.Long" resultType="java.lang.Long">
  		select status from buy_history where buy_history_num=#{buy_history_num}
  	</select>
  	  
  	<!-- sellnum으로 sell_history에서 status 가져오기 -->
  	<select id="sell_status" parameterType="java.lang.Long" resultType="java.lang.Long">
  		select status from sell_history where sell_history_num=#{sell_history_num}
  	</select>
  	
  	<!-- buy_his 검색 -->
  	<select id="buy_Sel" parameterType="java.lang.Long" resultType="com.iu.s1.paymentHistory.Buy_HistoryVO">
  		select * from buy_history where buy_history_num=#{buy_history_num}
  	</select>
  	
  	<!-- sell_his 검색 -->
  	<select id="sell_Sel" parameterType="java.lang.Long" resultType="com.iu.s1.paymentHistory.Sell_HistoryVO">
  		select * from sell_history where sell_history_num=#{sell_history_num}
  	</select>
  	
  	<!-- trading buy_cancel Up -->
  	<update id="buy_cancelUp" parameterType="com.iu.s1.trading.TradingVO">
  		update trading set buy_cancel=#{buy_cancel} where trading_num = #{trading_num}
  		
  	</update>
  	
  	<!-- trading sell_cancel Up -->
  	<update id="sell_cancelUp" parameterType="com.iu.s1.trading.TradingVO">
  		update trading set sell_cancel=#{sell_cancel} where trading_num = #{trading_num}
  	</update>
  	
  	<update id="product_cancel_status" parameterType="java.lang.Long">
 		update store_product set sell_status=0 where sell_num=#{sell_num}
 	</update>
 	<!-- AI 현재 증가값 -->
  	<select id="auto_incrementNum" resultType="Long">
  		SELECT AUTO_INCREMENT
		FROM information_schema.tables
		WHERE table_name = 'trading'
		AND table_schema = DATABASE( ) 
  	</select>
  	  	
  	<!-- payment Pager 시작 -->
  	<select id="paymentCount" parameterType="Pager"
		resultType="java.lang.Long">
		select count(mem_id) from payment where mem_id = #{search}
	</select>

	<select id="paymentList" parameterType="Pager"
		resultType="com.iu.s1.payment.PayVO">
		select * from payment where mem_id=#{search} order by pay_num desc limit #{startRow},10 
	</select>
	<!-- payment Pager 끝 -->
  	<select id="paymentHistory" parameterType="Long" resultType="com.iu.s1.payment.PayVO">
  		SELECT * FROM payment WHERE buy_history_num=#{buy_history_num} 
  	</select>

  	
 </mapper>
